//Problem 4 on Project Euler
//Find the largest palindrome made from the product of two 3 digit numbers

#include <iostream>
#include <cmath>
using namespace std;

//Global variables here
double product;
double largest_palindrome;

//Functions here
double digitsof (double x) {
    double n = 0;
    while (x>1) {       
        x /= 10;
        n++;
    }
    return n;
}
bool ispalindrome (double x) {
    double digits = digitsof (x);
    double temp = x;
    for(double i = 1; i <= digits/2; i++) {
        float y = (int)temp % 10;
        temp = temp/10;
        float z = (int)x / (int)pow(10 , digits - i);
        x = (int)x % (int)pow(10 , digits - i);
        if(y != z) {
            return false;
        } 
        else {
            return true;
        }
    }
}

//---------------------------------------------------------------------------------------//

int main() {
	//First we need to iterate over every product of two 3 digit numbers
	for(int i=900;i<=999; i++) {
	    for(int j=900;j<=999; i++) {
	        product = i*j;
	        
	        //Check if the product is a palindrome
            if (ispalindrome(product)) {
                largest_palindrome = product;
            }
	    }
	}
	return 0;
}
